var expect = require('expect.js');
var _ = require('underscore');
var FS = require('fs');
var Path = require('path');
var ProjectLoader = require('../tilepin-loader');

var options = {
    dir : __dirname
};

describe('TileProjectLoader', function() {
    var loader;
    var counters = {
        clearProjectConfig : {
            begin : 0,
            end : 0
        },
        loadProjectConfig : {
            begin : 0,
            end : 0
        }
    };
    beforeEach(function() {
        counterCleared = 0;
        counterLoaded = 0;
        loader = new ProjectLoader(options);
        _.each([ 'clearProjectConfig', 'loadProjectConfig' ], function(name) {
            counters[name] = {
                begin : 0,
                end : 0
            }
            loader.on(name + ':begin', function(ev) {
                counters[name].begin++;
            })
            loader.on(name + ':end', function(ev) {
                counters[name].end++;
            })
        })
    });
    var projectDir = Path.join(__dirname, 'projects/project-01');
    var projectFile = Path.join(projectDir, 'project.mml');

    it('should be able to prepare project '
            + 'and return a ready to use configuration object', function(done) {
        var params = {};
        loader.loadProjectConfig(projectDir).then(
                function(json) {
                    expect(json.pathname).to.eql(projectFile);
                    var config = json.config;
                    var layers = config.Layer;
                    expect(layers).not.to.be(null);
                    expect(layers.length).to.eql(1);
                    var path = 'data/ne_110m_admin_0_countries'
                            + '/ne_110m_admin_0_countries.shp';
                    path = Path.join(projectDir, path);
                    expect(layers[0].Datasource.file).to.eql(path);
                }).fin(done).done();
    })

    it('should be able to prepare and ' + 'load TileMill projects', function(
            done) {
        expect(counters.clearProjectConfig.begin).to.be(0);
        expect(counters.clearProjectConfig.end).to.be(0);
        expect(counters.loadProjectConfig.begin).to.be(0);
        expect(counters.loadProjectConfig.end).to.be(0);
        loader.loadProjectConfig(projectDir).then(function(info) {
            expect(counters.clearProjectConfig.begin).to.be(0);
            expect(counters.clearProjectConfig.end).to.be(0);
            expect(counters.loadProjectConfig.begin).to.be(1);
            expect(counters.loadProjectConfig.end).to.be(1);

            expect(info).not.to.be(null);
            expect(info.pathname).to.eql(projectFile);
            expect(info.xml).not.to.be(null);
        }).fin(done).done();
    })

    it('should be able to cleanup the project file', function(done) {
        expect(counters.clearProjectConfig.begin).to.be(0);
        expect(counters.clearProjectConfig.end).to.be(0);
        expect(counters.loadProjectConfig.begin).to.be(0);
        expect(counters.loadProjectConfig.end).to.be(0);
        return loader.loadProjectConfig(projectDir).then(function(info) {
            expect(counters.clearProjectConfig.begin).to.be(0);
            expect(counters.clearProjectConfig.end).to.be(0);
            expect(counters.loadProjectConfig.begin).to.be(1);
            expect(counters.loadProjectConfig.end).to.be(1);

            // Project file is generated by the loader
            expect(FS.existsSync(projectFile)).to.be(true);
            return loader.clearProjectConfig(projectDir).then(function() {
                expect(counters.clearProjectConfig.begin).to.be(1);
                expect(counters.clearProjectConfig.end).to.be(1);
                expect(counters.loadProjectConfig.begin).to.be(1);
                expect(counters.loadProjectConfig.end).to.be(1);
            }).then(function() {
                return loader.loadProjectConfig(projectDir).then(function() {
                    expect(counters.clearProjectConfig.begin).to.be(1);
                    expect(counters.clearProjectConfig.end).to.be(1);
                    expect(counters.loadProjectConfig.begin).to.be(2);
                    expect(counters.loadProjectConfig.end).to.be(2);
                })
            }).fin(done).done();
        })
    })

})