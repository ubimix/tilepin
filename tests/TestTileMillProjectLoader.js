var expect = require('expect.js');
var $ = require('cheerio');
var _ = require('underscore');
var Q = require('q');
var FS = require('fs');
var Path = require('path');
var TileMillProjectLoader = require('../tilepin-loader');

describe('TileMillProjectLoader', function() {

    var params = {
        source : 'project'
    };
    var projectFile = Path.join(__dirname, 'project/project.tilepin.xml');
    var loader;
    var counters = {};
    beforeEach(function() {
        counterCleared = 0;
        counterLoaded = 0;
        loader = new TileMillProjectLoader({
            dir : __dirname
        });
        _.each([ 'clearProject', 'loadProject' ], function(name) {
            counters[name] = {
                begin : 0,
                end : 0
            }
            loader.on(name + ':begin', function(ev) {
                counters[name].begin++;
            })
            loader.on(name + ':end', function(ev) {
                counters[name].end++;
            })
        })
    });
    it('should be able to prepare and ' + 'load TileMill projects', function(
            done) {
        expect(counters.clearProject.begin).to.be(0);
        expect(counters.clearProject.end).to.be(0);
        expect(counters.loadProject.begin).to.be(0);
        expect(counters.loadProject.end).to.be(0);
        loader.loadProject(params).then(function(info) {
            expect(counters.clearProject.begin).to.be(0);
            expect(counters.clearProject.end).to.be(0);
            expect(counters.loadProject.begin).to.be(1);
            expect(counters.loadProject.end).to.be(1);

            expect(info).not.to.be(null);
            expect(info.pathname).to.eql(projectFile);
            expect(info.xml).not.to.be(null);
        }).fin(done).done();
    })

    it('should be able to cleanup the project file', function(done) {
        expect(counters.clearProject.begin).to.be(0);
        expect(counters.clearProject.end).to.be(0);
        expect(counters.loadProject.begin).to.be(0);
        expect(counters.loadProject.end).to.be(0);
        return loader.loadProject(params).then(function(info) {
            expect(counters.clearProject.begin).to.be(0);
            expect(counters.clearProject.end).to.be(0);
            expect(counters.loadProject.begin).to.be(1);
            expect(counters.loadProject.end).to.be(1);

            // Project file is generated by the loader
            expect(FS.existsSync(projectFile)).to.be(true);
            return loader.clearProject(params).then(function() {
                expect(counters.clearProject.begin).to.be(1);
                expect(counters.clearProject.end).to.be(1);
                expect(counters.loadProject.begin).to.be(1);
                expect(counters.loadProject.end).to.be(1);
                // After cleaning the project file should be destroyed
                expect(FS.existsSync(projectFile)).to.be(false);
            }).then(function() {
                return loader.loadProject(params).then(function() {
                    expect(counters.clearProject.begin).to.be(1);
                    expect(counters.clearProject.end).to.be(1);
                    expect(counters.loadProject.begin).to.be(2);
                    expect(counters.loadProject.end).to.be(2);
                    // After the second loading the project file should be
                    // available again
                    expect(FS.existsSync(projectFile)).to.be(true);
                })
            }).fin(done).done();
        })
    })
})